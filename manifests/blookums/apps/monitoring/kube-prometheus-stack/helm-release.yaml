---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 51.5.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    fullnameOverride: prometheus
    prometheusOperator:
      createCustomResource: false
      configReloaderCpu: 200m
      configReloaderMemory: 100Mi
    alertmanager:
      config:
        global:
          slack_api_url: ${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: discord
            slack_configs:
              - channel: '#alerts'
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: Prometheus
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:*
                  {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end
                  }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: [alertname, job]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: discord
          routes:
            - receiver: 'null'
              match:
                alertname: Watchdog
            - receiver: discord
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: critical
            target_match:
              severity: warning
            equal: [alertname, namespace]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          kubernetes.io/tls-acme: 'true'
          nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.networking.svc.cluster.local/oauth2/auth
          nginx.ingress.kubernetes.io/auth-signin: ${SECRET_AUTH_URL}
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - alertmanager.${SECRET_DOMAIN}
        tls:
          - secretName: alertmanager-tls
            hosts:
              - alertmanager.${SECRET_DOMAIN}
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-hdd-xfs
              resources:
                requests:
                  storage: 10Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          kubernetes.io/tls-acme: 'true'
          nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.networking.svc.cluster.local/oauth2/auth
          nginx.ingress.kubernetes.io/auth-signin: ${SECRET_AUTH_URL}
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - prometheus.${SECRET_DOMAIN}
        tls:
          - secretName: prometheus-tls
            hosts:
              - prometheus.${SECRET_DOMAIN}
      prometheusSpec:
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 60d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-hdd-xfs
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            cpu: 250m
            memory: 1200Mi
          limits:
            memory: 2500Mi
        additionalScrapeConfigs:
          - job_name: mqtt
            honor_timestamps: true
            metrics_path: /metrics
            static_configs:
              - targets:
                  - ${SECRET_MQTT_HOST}:9641
